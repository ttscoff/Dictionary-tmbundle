<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby -W0 -KU
SUPPORT = ENV['TM_SUPPORT_PATH']
DIALOG = ENV['DIALOG']
require SUPPORT + '/lib/ui'
require SUPPORT + '/lib/osx/plist'
require SUPPORT + '/lib/escape'
require SUPPORT + '/lib/exit_codes'
require SUPPORT + "/lib/progress"
require 'cgi'
require 'net/http'
require 'net/https'
require 'rexml/document'

def spell_req(text)
    '&lt;spellrequest textalreadyclipped="0" ignoredups="0" ignoredigits="1" ignoreallcaps="0"&gt;&lt;text&gt;'+REXML::Text.new(text).to_s+'&lt;/text&gt;&lt;/spellrequest&gt;'
end

def check_spelling(text)
$out = text.clone
h = Net::HTTP.new("www.google.com", 443)
h.use_ssl=true
resp, body = h.post("/tbproxy/spell?lang=en&amp;hl=en", spell_req(text))

if resp.code.to_i == 200
    body.scan(/&lt;c o="(\d+)" l="(\d+)" s="(\d+)"&gt;(\w+).*?&lt;\/c&gt;/) {|o, l, s, t| $out.sub!(text[o.to_i, l.to_i], t)}
    return $out
else
	return nil
end
end

phrase = STDIN.read
newphrase = check_spelling(phrase)
TextMate.exit_show_tool_tip "Looks fine to meâ€¦" if newphrase == phrase
unless newphrase.nil?
	res = TextMate::UI.request_confirmation(:button1 =&gt; "Yes, it is", :button2 =&gt; "No, it's not", :title =&gt; "The I Feel Lucky Spell Check",:prompt =&gt; "Is #{newphrase} the word you were looking for?")
	if res == true
		print newphrase 
		TextMate.exit_replace_text
	end
else
	TextMate.exit_show_tool_tip "Nothing found"
end

TextMate.exit_show_tool_tip "Sorry"</string>
	<key>fallbackInput</key>
	<string>word</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>~@D</string>
	<key>name</key>
	<string>Quick spelling guess</string>
	<key>output</key>
	<string>showAsTooltip</string>
	<key>uuid</key>
	<string>0BCC1CB2-CEC0-4996-B83F-64FBF69BC670</string>
</dict>
</plist>
